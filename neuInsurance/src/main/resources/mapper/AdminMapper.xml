<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.neu.insurance.mapper.AdminMapper">

    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="org.neu.insurance.entity.Admin">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="real_name" property="realName" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="avatar" property="avatar" jdbcType="VARCHAR"/>
        <result column="user_type" property="userType" jdbcType="VARCHAR"/>
        <result column="role" property="role" jdbcType="VARCHAR"/>
        <result column="department" property="department" jdbcType="VARCHAR"/>
        <result column="position" property="position" jdbcType="VARCHAR"/>
        <result column="id_card" property="idCard" jdbcType="VARCHAR"/>
        <result column="gender" property="gender" jdbcType="VARCHAR"/>
        <result column="birth_date" property="birthDate" jdbcType="VARCHAR"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="department_id" property="departmentId" jdbcType="BIGINT"/>
        <result column="last_login_time" property="lastLoginTime" jdbcType="TIMESTAMP"/>
        <result column="last_login_ip" property="lastLoginIp" jdbcType="VARCHAR"/>
        <result column="login_fail_count" property="loginFailCount" jdbcType="INTEGER"/>
        <result column="locked_time" property="lockedTime" jdbcType="TIMESTAMP"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="create_by" property="createBy" jdbcType="VARCHAR"/>
        <result column="update_by" property="updateBy" jdbcType="VARCHAR"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
        <result column="license_number" property="licenseNumber" jdbcType="VARCHAR"/>
        <result column="specialty" property="specialty" jdbcType="VARCHAR"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="work_schedule" property="workSchedule" jdbcType="VARCHAR"/>
        <result column="certification" property="certification" jdbcType="VARCHAR"/>
    </resultMap>

    <!-- 基础字段 -->
    <sql id="Base_Column_List">
        id, username, password, real_name, email, phone, avatar, user_type, role, department, 
        position, id_card, gender, birth_date, address, status, department_id, last_login_time, 
        last_login_ip, login_fail_count, locked_time, create_time, update_time, create_by, 
        update_by, remark, license_number, specialty, title, work_schedule, certification
    </sql>

    <!-- 根据条件分页查询用户列表 -->
    <select id="selectByCondition" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_admin
        <where>
            <if test="userType != null and userType != ''">
                AND user_type = #{userType}
            </if>
            <if test="department != null and department != ''">
                AND department = #{department}
            </if>
            <if test="keyword != null and keyword != ''">
                AND (username LIKE CONCAT('%', #{keyword}, '%') 
                OR real_name LIKE CONCAT('%', #{keyword}, '%')
                OR email LIKE CONCAT('%', #{keyword}, '%')
                OR phone LIKE CONCAT('%', #{keyword}, '%'))
            </if>
        </where>
        ORDER BY create_time DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 根据条件统计用户总数 -->
    <select id="countByCondition" resultType="int">
        SELECT COUNT(*)
        FROM sys_admin
        <where>
            <if test="userType != null and userType != ''">
                AND user_type = #{userType}
            </if>
            <if test="department != null and department != ''">
                AND department = #{department}
            </if>
            <if test="keyword != null and keyword != ''">
                AND (username LIKE CONCAT('%', #{keyword}, '%') 
                OR real_name LIKE CONCAT('%', #{keyword}, '%')
                OR email LIKE CONCAT('%', #{keyword}, '%')
                OR phone LIKE CONCAT('%', #{keyword}, '%'))
            </if>
        </where>
    </select>

    <!-- 根据ID查询用户 -->
    <select id="selectById" parameterType="long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_admin
        WHERE id = #{id}
    </select>

    <!-- 根据用户名查询用户 -->
    <select id="selectByUsername" parameterType="string" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_admin
        WHERE username = #{username}
    </select>

    <!-- 根据邮箱查询用户 -->
    <select id="selectByEmail" parameterType="string" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_admin
        WHERE email = #{email}
    </select>

    <!-- 根据手机号查询用户 -->
    <select id="selectByPhone" parameterType="string" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_admin
        WHERE phone = #{phone}
    </select>

    <!-- 新增用户 -->
    <insert id="insert" parameterType="org.neu.insurance.entity.Admin" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_admin (
            username, password, real_name, email, phone, avatar, status, department_id, 
            last_login_time, last_login_ip, login_fail_count, locked_time, create_time, 
            update_time, create_by, update_by, remark
        ) VALUES (
            #{username}, #{password}, #{realName}, #{email}, #{phone}, #{avatar}, #{status}, 
            #{departmentId}, #{lastLoginTime}, #{lastLoginIp}, #{loginFailCount}, 
            #{lockedTime}, #{createTime}, #{updateTime}, #{createBy}, #{updateBy}, #{remark}
        )
    </insert>

    <!-- 更新用户 -->
    <update id="update" parameterType="org.neu.insurance.entity.Admin">
        UPDATE sys_admin
        <set>
            <if test="username != null">username = #{username},</if>
            <if test="password != null">password = #{password},</if>
            <if test="realName != null">real_name = #{realName},</if>
            <if test="email != null">email = #{email},</if>
            <if test="phone != null">phone = #{phone},</if>
            <if test="avatar != null">avatar = #{avatar},</if>
            <if test="status != null">status = #{status},</if>
            <if test="departmentId != null">department_id = #{departmentId},</if>
            <if test="lastLoginTime != null">last_login_time = #{lastLoginTime},</if>
            <if test="lastLoginIp != null">last_login_ip = #{lastLoginIp},</if>
            <if test="loginFailCount != null">login_fail_count = #{loginFailCount},</if>
            <if test="lockedTime != null">locked_time = #{lockedTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="remark != null">remark = #{remark},</if>
        </set>
        WHERE id = #{id}
    </update>

    <!-- 根据ID删除用户 -->
    <delete id="deleteById" parameterType="long">
        DELETE FROM sys_admin WHERE id = #{id}
    </delete>

    <!-- 批量删除用户 -->
    <delete id="batchDelete" parameterType="list">
        DELETE FROM sys_admin WHERE id IN
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <!-- 根据用户类型查询用户列表 -->
    <select id="selectByUserType" parameterType="string" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_admin
        WHERE user_type = #{userType}
        ORDER BY create_time DESC
    </select>

    <!-- 根据部门查询用户列表 -->
    <select id="selectByDepartment" parameterType="string" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_admin
        WHERE department = #{department}
        ORDER BY create_time DESC
    </select>

    <!-- 根据角色查询用户列表 -->
    <select id="selectByRole" parameterType="string" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_admin
        WHERE role = #{role}
        ORDER BY create_time DESC
    </select>

    <!-- 更新最后登录信息 -->
    <update id="updateLastLoginInfo">
        UPDATE sys_admin 
        SET last_login_time = NOW(), 
            last_login_ip = #{ip},
            login_fail_count = 0
        WHERE id = #{id}
    </update>

    <!-- 获取所有用户类型 -->
    <select id="selectAllUserTypes" resultType="string">
        SELECT DISTINCT user_type 
        FROM sys_admin 
        WHERE user_type IS NOT NULL AND user_type != ''
        ORDER BY user_type
    </select>

    <!-- 获取所有部门 -->
    <select id="selectAllDepartments" resultType="string">
        SELECT DISTINCT department 
        FROM sys_admin 
        WHERE department IS NOT NULL AND department != ''
        ORDER BY department
    </select>

    <!-- 获取所有角色 -->
    <select id="selectAllRoles" resultType="string">
        SELECT DISTINCT role 
        FROM sys_admin 
        WHERE role IS NOT NULL AND role != ''
        ORDER BY role
    </select>

    <!-- 检查用户名是否存在 -->
    <select id="countByUsername" parameterType="string" resultType="int">
        SELECT COUNT(*) FROM sys_admin WHERE username = #{username}
    </select>

    <!-- 检查邮箱是否存在 -->
    <select id="countByEmail" parameterType="string" resultType="int">
        SELECT COUNT(*) FROM sys_admin WHERE email = #{email}
    </select>

    <!-- 检查手机号是否存在 -->
    <select id="countByPhone" parameterType="string" resultType="int">
        SELECT COUNT(*) FROM admin WHERE phone = #{phone}
    </select>

</mapper> 